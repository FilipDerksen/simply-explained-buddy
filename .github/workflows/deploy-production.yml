name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
  push:
    tags:
      - 'v*'

jobs:
  deploy-frontend-production:
    name: Deploy Frontend to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        vercel-args: '--prod'
        
    - name: Deploy to Netlify (Alternative)
      if: false  # Set to true if using Netlify instead of Vercel
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Production deploy from GitHub Actions"

  deploy-backend-production:
    name: Deploy Backend to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Deploy to Railway (Production)
      run: |
        npm install -g @railway/cli
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway up --service ${{ secrets.RAILWAY_SERVICE_ID }}
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NODE_ENV: production
        PORT: 3001
        FRONTEND_URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}
        
    - name: Deploy to Render (Alternative)
      if: false  # Set to true if using Render instead of Railway
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        api-key: ${{ secrets.RENDER_API_KEY }}
        service-id: ${{ secrets.RENDER_SERVICE_ID }}

  health-check-production:
    name: Health Check Production
    runs-on: ubuntu-latest
    needs: [deploy-frontend-production, deploy-backend-production]
    
    steps:
    - name: Wait for deployment
      run: sleep 60
      
    - name: Test production backend
      run: |
        curl -f ${{ secrets.PRODUCTION_BACKEND_URL }}/health || exit 1
        
    - name: Test production frontend
      run: |
        curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }} || exit 1
        
    - name: Test API integration
      run: |
        curl -X POST ${{ secrets.PRODUCTION_BACKEND_URL }}/api/explain \
          -H "Content-Type: application/json" \
          -d '{"question":"test"}' \
          --max-time 10 || echo "API test completed"
          
    - name: Create deployment summary
      run: |
        echo "## ðŸš€ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: ${{ secrets.PRODUCTION_FRONTEND_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: ${{ secrets.PRODUCTION_BACKEND_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- Status: âœ… All health checks passed" >> $GITHUB_STEP_SUMMARY
